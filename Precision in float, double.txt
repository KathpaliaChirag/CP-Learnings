Problem :

Reading
To read a data type, use the following syntax:

scanf("`format_specifier`", &val)
For example, to read a character followed by a double:

char ch;
double d;
scanf("%c %lf", &ch, &d);
For the moment, we can ignore the spacing between format specifiers.

Printing
To print a data type, use the following syntax:

printf("`format_specifier`", val)
For example, to print a character followed by a double:

char ch = 'd';
double d = 234.432;
printf("%c %lf", ch, d);
Note: You can also use cin and cout instead of scanf and printf; however, if you are taking a million numbers as input and printing a million lines, it is faster to use scanf and printf.

Input Format

Input consists of the following space-separated values: int, long, char, float, and double, respectively.

Output Format

Print each element on a new line in the same order it was received as input. Note that the floating point value should be correct up to 3 decimal places and the double to 9 decimal places.


Solution :

#include<bits/stdc++.h> // boss of all #includes that has all you need for cp
using namespace std;
int main() {
    // Complete the code.
    int a; long b; char c; float d; double e;
    std::cin>> a >> b >>c >>d >>e ;
    std:: cout<< a << "\n";
    std:: cout<< b << "\n";
    std:: cout<< c << "\n";
    std:: cout<<std::fixed<< std::setprecision(3) << d << "\n"; // fixed here is to tell the compiler that decimal point is fixed and not to assume it as floating point, setprecision helps us in setting how many digits after decimal we are expecting to be printed
    std:: cout<<std::fixed<< std::setprecision(9) << e << "\n";
    
    // OR
    
    
    scanf("%d %ld %c %f %lf", &a,&b,&c,&d,&e);
    printf("%d \n",a);
    printf("%ld \n",b);
    printf("%c \n",c);
    printf("%.3f \n",d); // similarly to do same in format specifier we add a dot and number of ditits compiler should represent after decimal
    printf("%.9lf \n",e);
    return 0;
}
